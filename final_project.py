#CS5
#final_project.py
#Names: Jonathan Becker and Jinghan Alina Hu
#Hits and Hits game

import random
import webbrowser

class HAHGame:
    """ a Hits and Hits rivalry that tracks, saves, and loads games """

    def __init__(self):
        """ the constructor
              should include count of wins for each player
        """
        self.num_user_losses = 0
        self.num_user_wins = 0

    def __repr__(self):
        """ the representation function
              should return a string of some sort
        """
        s = ''
        s += "You have lost" + str(self.num_user_losses) + "games.\n"
        s += "You have won" + str(self.num_user_wins) + "games.\n"
        return s

    def one_guess(self):
        """one_guess allows the user to guess the computer's number one time
        """
        user = input("Pick a 4 digit number string with elements from 0 to 3. e.g. 0123 is a valid guess ")
        print()

        ## Sanity Check 
        while len(user)!=4 or int(user[0]) not in range (0,4) \
            or int(user[1]) not in range (0,4) \
            or int(user[2]) not in range (0,4) or int(user[3]) not in range (0,4):
            print('hmm something went wrong. Please input a 4 digit number string the elements can only be from 0 to 3. Try again Please')
            user = input("Pick a 4 digit number string with elements from 0 to 3. ")
            print()

        outcome=self.result
        hits=0
        for x in range(0,4):
            if user[x]==outcome[x]:
                hits+=1
        print("The number of hits tells you how many digits you have guess correctly. You have "+str(hits)+" hits.")
        print()
        
        if hits==4: 
            self.num_user_wins+=1
            self.playing=False 
            print("you got it! Good job. You win!!")
       
    
    def play_one_round(self):
        """play_one_round is a helper function that allows the user to play one round of HAH, which consists of 5 rounds of guessing a string of 4 numbers 
           generated by the computer. The numbers are all within the range from 0-3, inclusive of both end points.
        """
        self.result=""
        #generate string
        for x in range (1,5):
            comp=random.choice([0,1,2,3])
            self.result+=str(comp)
        self.playing = True 
        guess=0
        while self.playing==True: 
            guess+=1
            self.one_guess()
            if guess>5: 
                self.playing=False
                print ('you lose')
                self.num_user_losses+=1


    def status(self): 
        """status allows the user to see their current status: wins and losses
        """
        print("\n+ Current tally +")
        print("   Your losses:", self.num_user_losses)
        print("  Your wins:", self.num_user_wins)
        print()

    def menu(self):
        """ prints the menu """
        print()
        self.status()
        print("Welcome Back to Hits and Hits!")
        print("Menu:")
        print("  (1) Continue our HAH rivalry")
        print("  (2) Load our game")
        print("  (4) Save our game")
        print("  (8) Quit")
        print()
        uc = input("Your choice: ")
        try:
            uc = int(uc)  # try converting to an integer
            if uc not in [1,2,4,8,42]:  # Easter eggs welcome!
                print("    Didn't recognize that input\n")
            else:
                return uc  # _must_ be a 1, 2, 4, or 42

        except ParseError as e:  # it wasn't an integer...
            print("    Didn't understand that input\n")
            # print("The error was:", e)
            
        return self.menu()


    def play(self):
        """ hosts a series of games or turns """
        while True:
            userchoice = self.menu()  # prints the welcome and menu 

            if userchoice == 1:
                self.play_one_round()

            if userchoice == 8:
                print("Til next time!")
                break

            if userchoice == 4:
                self.save_game("gamefile.txt")

            if userchoice == 2:
                self.load_game("gamefile.txt")
                print("Welcome back!")




    def save_game(self, filename):
        """ save to a file """
        f = open(filename,"w")  # open file for writing
        data = [self.num_user_wins, self.num_user_losses]
        print(data,file=f)
        f.close()
        print(filename, " saved.")


    def load_game(self, filename):
        """ load from a file """
        f = open(filename,"r")  # open file for reading
        data = eval(f.read())   # evaluate the results as a Python object
        f.close()
        self.num_user_wins = data[0]
        self.num_user_losses = data[1]
        print(filename, " loaded.")


x=HAHGame() 
x.play()                                                                                             
                    


